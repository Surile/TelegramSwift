# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.20)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget tg_owt::tg_owt tg_owt::libpffft tg_owt::librnnoise tg_owt::libsrtp tg_owt::libwebrtcbuild tg_owt::libyuv tg_owt::libsdkmacos tg_owt::libabsl tg_owt::libopenh264 tg_owt::libcrc32c)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target tg_owt::tg_owt
add_library(tg_owt::tg_owt STATIC IMPORTED)

set_target_properties(tg_owt::tg_owt PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:tg_owt::libpffft>;\$<LINK_ONLY:tg_owt::librnnoise>;\$<LINK_ONLY:tg_owt::libsrtp>;\$<LINK_ONLY:tg_owt::libyuv>;tg_owt::libsdkmacos;\$<LINK_ONLY:tg_owt::libabsl>;\$<LINK_ONLY:tg_owt::libopenh264>;\$<LINK_ONLY:tg_owt::libcrc32c>;tg_owt::libwebrtcbuild"
)

# Create imported target tg_owt::libpffft
add_library(tg_owt::libpffft INTERFACE IMPORTED)

set_target_properties(tg_owt::libpffft PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt/third_party/pffft/src"
)

# Create imported target tg_owt::librnnoise
add_library(tg_owt::librnnoise INTERFACE IMPORTED)

set_target_properties(tg_owt::librnnoise PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
)

# Create imported target tg_owt::libsrtp
add_library(tg_owt::libsrtp INTERFACE IMPORTED)

set_target_properties(tg_owt::libsrtp PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt/third_party/libsrtp/include;${_IMPORT_PREFIX}/include/tg_owt/third_party/libsrtp/crypto/include"
)

# Create imported target tg_owt::libwebrtcbuild
add_library(tg_owt::libwebrtcbuild INTERFACE IMPORTED)

set_target_properties(tg_owt::libwebrtcbuild PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "WEBRTC_ENABLE_PROTOBUF=0;WEBRTC_APM_DEBUG_DUMP=0;WEBRTC_USE_BUILTIN_ISAC_FLOAT;WEBRTC_OPUS_VARIABLE_COMPLEXITY=0;WEBRTC_OPUS_SUPPORT_120MS_PTIME=1;WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE;WEBRTC_USE_H264;WEBRTC_LIBRARY_IMPL;WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1;WEBRTC_HAVE_DCSCTP;WEBRTC_HAVE_SCTP;NO_MAIN_THREAD_WRAPPING;HAVE_WEBRTC_VIDEO;RTC_ENABLE_VP9;RTC_DISABLE_TRACE_EVENTS;BWE_TEST_LOGGING_COMPILE_TIME_ENABLE=0;WEBRTC_POSIX;WEBRTC_MAC"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt"
  INTERFACE_LINK_LIBRARIES "tg_owt::libyuv;tg_owt::libabsl"
)

# Create imported target tg_owt::libyuv
add_library(tg_owt::libyuv INTERFACE IMPORTED)

set_target_properties(tg_owt::libyuv PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt/third_party/libyuv/include"
)

# Create imported target tg_owt::libsdkmacos
add_library(tg_owt::libsdkmacos INTERFACE IMPORTED)

set_target_properties(tg_owt::libsdkmacos PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt;${_IMPORT_PREFIX}/include/tg_owt/sdk/objc;${_IMPORT_PREFIX}/include/tg_owt/sdk/objc/base;${_IMPORT_PREFIX}/include/tg_owt/sdk/objc/components/video_codec"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:tg_owt::libwebrtcbuild>"
)

# Create imported target tg_owt::libabsl
add_library(tg_owt::libabsl INTERFACE IMPORTED)

set_target_properties(tg_owt::libabsl PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt/third_party/abseil-cpp"
)

# Create imported target tg_owt::libopenh264
add_library(tg_owt::libopenh264 INTERFACE IMPORTED)

set_target_properties(tg_owt::libopenh264 PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
)

# Create imported target tg_owt::libcrc32c
add_library(tg_owt::libcrc32c INTERFACE IMPORTED)

set_target_properties(tg_owt::libcrc32c PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/tg_owt/third_party/crc32c/src/include"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/tg_owtTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
